"use strict";

const { STATUS_CODES } = require("@simplicityjs/framework/component/http");
const { $$MODEL_NAME$$ } = require("app/http/models/sequelize");
const Controller = require("app/http/controllers/controller");

module.exports = class $$CONTROLLER_NAME$$ extends Controller {
  constructor() {
    super();
  }

  async index(req, res) {
    const logger = req.app.resolve("logger");
    const limit = req.query.limit ? parseInt(req.query.limit, 10) : 10;
    const page = req.query.page ? parseInt(req.query.page, 10) : 1;

    delete req.query["limit"];
    delete req.query["page"];

    try {
      const data = await $$MODEL_NAME$$.findAndCountAll({
        where: req.query,
        limit,
        offset: limit * page - limit,
      });

      return res.status(STATUS_CODES.HTTP_OK).send({
        msg: "$$TABLE_ENTITY$$ fetched",
        data: data.rows,
        page: page,
        limit: limit,
        total_page: Math.ceil(data.count / limit),
      });
    } catch(error) {
      logger.error(error);

      return res.status(STATUS_CODES.HTTP_INTERNAL_SERVER_ERROR).send(error);
    }
  }

  async new(req, res) {
    /**
     * Display the form to create a new entity
     */
  }

  async show(req, res) {
    const logger = req.app.resolve("logger");

    try {
      const data = await $$MODEL_NAME$$.findByPk(req.params.id);

      return res.status(STATUS_CODES.HTTP_OK).send({
        msg: "$$TABLE_ENTITY$$ fetched",
        data: data
      });
    } catch(error) {
      logger.error(error);

      return res.status(STATUS_CODES.HTTP_INTERNAL_SERVER_ERROR).send(error);
    }
  }

  async create(req, res) {
    const logger = req.app.resolve("logger");

    try {
      const data = await $$MODEL_NAME$$.create(req.body);

      return res.status(STATUS_CODES.HTTP_CREATED).send({
        msg: "$$TABLE_ENTITY$$ created",
        data: data,
      });
    } catch(error) {
      logger.error(error);

      return res.status(STATUS_CODES.HTTP_INTERNAL_SERVER_ERROR).send(error);
    }
  }

  async edit(req, res) {
    /**
     * Display the edit form for a single entity
     * The entity id is available via req.params.id.
     */
  }

  async update(req, res) {
    const logger = req.app.resolve("logger");

    try {
      const data = await $$MODEL_NAME$$.update(req.body, {
        where: { id: req.params.id },
      });

      return res.status(STATUS_CODES.HTTP_OK).send({
        msg: "$$TABLE_ENTITY$$ updated",
        data: data,
      });
    } catch(error) {
      logger.error(error);

      return res.status(STATUS_CODES.HTTP_INTERNAL_SERVER_ERROR).send(error);
    }
  }

  async destroy(req, res) {
    const logger = req.app.resolve("logger");

    try {
      const data = await $$MODEL_NAME$$.destroy({
        where: { id: req.params.id },
      });

      return res.status(STATUS_CODES.HTTP_OK).send({
        msg: "$$TABLE_ENTITY$$ deleted",
        data: data,
      });
    } catch(error) {
      logger.error(error);

      return res.status(STATUS_CODES.HTTP_INTERNAL_SERVER_ERROR).send(error);
    }
  }
};
